{"mode":"Text","textContent":"#-----------------------------------------------------------------------------*/\n#                                                                             */\n#     Module:       defaultDrivePy                                            */\n#     Author:       james                                                     */\n#     Created:      Tue Dec 29 2020                                           */\n#     Description:  Default Clawbot code - Python                             */\n#                                                                             */\n#-----------------------------------------------------------------------------*/\n# Library imports\nfrom vex import *\n\n# Create motors on ports 1 through 10\nmotor_1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nmotor_2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nmotor_3 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nmotor_4 = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nmotor_5 = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nmotor_6 = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\nmotor_7 = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\nmotor_8 = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nmotor_9 = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nmotor_10 = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\n\n# Limit switches for motor 3 and 8\nlimit_switch_3f = Limit(brain.three_wire_port.a);\nlimit_switch_3r = Limit(brain.three_wire_port.b);\nlimit_switch_8f = Limit(brain.three_wire_port.c);\nlimit_switch_8r = Limit(brain.three_wire_port.d);\n\n# The controller\ncontroller_1 = Controller(ControllerType.PRIMARY)\n\n# Assign generic motor to more useful names here\n# We use references\nleft_drive_1 = motor_1\nright_drive_1 = motor_2\nleft_drive_2 = motor_9\nright_drive_2 = motor_10\n\n# Arm and claw motors will have brake mode set to hold\n# Claw motor will have max torque limited\nclaw_motor = motor_3\narm_motor = motor_8\n\nclass DriveType:\n    LEFT = 0\n    DUAL = 1\n    SPLIT = 2\n    RIGHT = 3\n    value = 0\n\n    def __init__(self, value):\n        self.value = value\n    def __str__(self):\n        return self.value\n    def __repr__(self):\n        return self.value\n    def __eq__(self, value):\n        return self.value == value\n\n# pick LEFT, DUAL, SPLIT or RIGHT\ndrive_mode = DriveType(DriveType.LEFT)\n\n# Max motor speed (percent) for motors controlled by buttons\nMAX_SPEED = 50\n\n#-----------------------------------------------------------------------------*/\n#   @brief  Drive task                                                        */\n#-----------------------------------------------------------------------------*/\n#\n# All motors are controlled from this function which is run as a separate thread\n#\ndef drive_task():\n    drive_left = 0\n    drive_right = 0\n\n    # setup the claw motor\n    claw_motor.set_max_torque(25, PERCENT)\n    claw_motor.set_stopping(HOLD)\n\n    # setup the arm motor\n    arm_motor.set_stopping(HOLD)\n\n    # loop forever\n    while True:\n        # buttons\n        # Three values, max, 0 and -max.\n        #\n        drive_m_3 = (controller_1.buttonL1.pressing() - controller_1.buttonL2.pressing()) * MAX_SPEED\n        drive_m_4 = (controller_1.buttonRight.pressing() - controller_1.buttonLeft.pressing()) * MAX_SPEED\n        drive_m_5 = (controller_1.buttonUp.pressing() - controller_1.buttonDown.pressing()) * MAX_SPEED\n        drive_m_6 = (controller_1.buttonA.pressing() - controller_1.buttonY.pressing()) * MAX_SPEED\n        drive_m_7 = (controller_1.buttonX.pressing() - controller_1.buttonB.pressing()) * MAX_SPEED\n        drive_m_8 = (controller_1.buttonR1.pressing() - controller_1.buttonR2.pressing()) * MAX_SPEED\n\n        # use limit switches on motors 3 and 8\n        if (limit_switch_3f.pressing() and (drive_m_3 > 0)) or (limit_switch_3r.pressing() and (drive_m_3 < 0)):\n            drive_m_3 = 0\n        if (limit_switch_8f.pressing() and (drive_m_8 > 0)) or (limit_switch_8r.pressing() and (drive_m_8 < 0)):\n            drive_m_8 = 0\n\n        # Various choices for arcade or tank drive\n        if drive_mode == DriveType.LEFT:\n            drive_left = controller_1.axis3.position() + controller_1.axis4.position()\n            drive_right = controller_1.axis3.position() - controller_1.axis4.position()\n        elif drive_mode == DriveType.DUAL:\n            drive_left = controller_1.axis3.position()\n            drive_right = controller_1.axis2.position()\n        elif drive_mode == DriveType.SPLIT:\n            drive_left = controller_1.axis3.position() + controller_1.axis1.position()\n            drive_right = controller_1.axis3.position() - controller_1.axis1.position()\n        elif drive_mode == DriveType.RIGHT:\n            drive_left = controller_1.axis2.position() + controller_1.axis1.position()\n            drive_right = controller_1.axis2.position() - controller_1.axis1.position()\n\n        # threshold the variable channels so the drive does not\n        # move if the joystick axis does not return exactly to 0\n        deadband = 15\n        if abs(drive_left) < deadband:\n            drive_left = 0\n        if abs(drive_right) < deadband:\n            drive_right = 0\n\n        # Now send all drive values to motors\n\n        # The drivetrain\n        left_drive_1.spin(FORWARD, drive_left, PERCENT)\n        left_drive_2.spin(FORWARD, drive_left, PERCENT)\n        right_drive_1.spin(FORWARD, drive_right, PERCENT)\n        right_drive_2.spin(FORWARD, drive_right, PERCENT)\n\n        # and all the auxilary motors\n        motor_3.spin(FORWARD, drive_m_3, PERCENT)\n        motor_4.spin(FORWARD, drive_m_4, PERCENT)\n        motor_5.spin(FORWARD, drive_m_5, PERCENT)\n        motor_6.spin(FORWARD, drive_m_6, PERCENT)\n        motor_7.spin(FORWARD, drive_m_7, PERCENT)\n        motor_8.spin(FORWARD, drive_m_8, PERCENT)\n\n        # No need to run too fast\n        sleep(10)\n\n# define some more colors\ngrey = Color(0x202020)\ndgrey = Color(0x2F4F4F)\nlblue = Color(0x303060)\nlred = Color(0x603030)\n\n#------------------------------------------------------------------------------*/\n#   @brief      Display data for one motor                                     */\n#------------------------------------------------------------------------------*/\ndef displayMotorData(m, index):\n    ypos = 0\n    xpos = index * 48\n\n    # command value not available in Python\n    v1 = 0\n\n    # The actual velocity of the motor in rpm\n    v2 = m.velocity(RPM)\n\n    # The position of the motor internal encoder in revolutions\n    pos = m.position(TURNS)\n\n    # Motor current in Amps\n    c1 = m.current()\n\n    # Motor temperature\n    t1 = m.temperature()\n\n    brain.screen.set_font(FontType.MONO15)\n\n    # background color based on\n    # device and whether it's left, right or other motor\n    if not m.installed():\n        brain.screen.set_fill_color(grey)\n    elif m == left_drive_1 or m == left_drive_2:\n        brain.screen.set_fill_color(lblue)\n    elif m == right_drive_1 or m == right_drive_2:\n        brain.screen.set_fill_color(lred)\n    else:\n        brain.screen.set_fill_color(dgrey)\n\n    # Draw outline for motor info\n    brain.screen.set_pen_color(Color.WHITE)\n    w = 49 if index < 9 else 48\n    brain.screen.draw_rectangle(xpos, ypos, w, 79)\n\n    # no motor, then return early\n    if not m.installed():\n        brain.screen.print_at(\"NC\", x=xpos+15, y=ypos+30)\n        return\n\n    # we have no way to get command value in Python VM 1.0.0b20\n    # so have to deviate from C++ version, just show port number\n    brain.screen.print_at(\"%02d\" % (index+1), x=xpos+13, y=ypos+13)\n\n    # Show actual speed\n    brain.screen.set_pen_color(Color.YELLOW)\n    brain.screen.print_at(\"%4d\" % v2, x=xpos+13, y=ypos+30)\n\n    # Show position\n    brain.screen.print_at(\"%5.1f\" % pos, x=xpos+5, y=ypos+45)\n\n    # Show current\n    brain.screen.print_at(\"%4.1fA\" % c1, x=xpos+5, y=ypos+60)\n\n    # Show temperature\n    brain.screen.print_at(\"%4.0fC\" % t1, x=xpos+5, y=ypos+75)\n\n    brain.screen.set_pen_color(Color.WHITE)\n    brain.screen.draw_line(xpos, ypos+14, xpos+48, ypos+14)\n\n\n#-----------------------------------------------------------------------------*/\n#   @brief  Display task - show some useful motor data                        */\n#-----------------------------------------------------------------------------*/\ndef display_task():\n    brain.screen.set_font(FontType.PROP40)\n    brain.screen.set_pen_color(Color.RED)\n    brain.screen.print_at(\"TEST DRIVE CODE\", x=90, y=160)\n\n    motors = [motor_1,\n              motor_2,\n              motor_3,\n              motor_4,\n              motor_5,\n              motor_6,\n              motor_7,\n              motor_8,\n              motor_9,\n              motor_10]\n\n    while True:\n        index = 0\n        for m in motors:\n            displayMotorData(m, index)\n            index = index+1\n\n        # display using back buffer, stops flickering\n        brain.screen.render()\n\n        sleep(10)\n\n# Run the drive code\ndrive = Thread(drive_task)\n\n# Run the display code\ndisplay = Thread(display_task)\n\n# Python now drops into REPL","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":""}